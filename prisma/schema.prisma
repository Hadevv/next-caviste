generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  username      String
  password      String
  bio           String?
  avatarUrl     String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  boats         Boat[]
  rentals       Rental[]
  bookings      Booking[]
  reviews       Review[]
  notifications Notification[]
  payments      Payment[]
}

model Boat {
  id          Int       @id @default(autoincrement())
  name        String
  type        String
  description String
  imageUrl    String?
  owner       User      @relation(fields: [ownerId], references: [id])
  ownerId     String
  rentals     Rental[]
  reviews     Review[]
  bookings    Booking[]
}

model Rental {
  id        Int       @id @default(autoincrement())
  boat      Boat      @relation(fields: [boatId], references: [id])
  boatId    Int
  renter    User      @relation(fields: [renterId], references: [id])
  renterId  String
  startDate DateTime
  endDate   DateTime
  payment   Payment[]
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  boat      Boat     @relation(fields: [boatId], references: [id])
  boatId    Int
}

model Notification {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Payment {
  id        Int      @id @default(autoincrement())
  amount    Float
  method    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  rental    Rental   @relation(fields: [rentalId], references: [id])
  rentalId  Int
}

model Booking {
  id        Int      @id @default(autoincrement())
  boat      Boat     @relation(fields: [boatId], references: [id])
  boatId    Int
  renter    User     @relation(fields: [renterId], references: [id])
  renterId  String
  startDate DateTime
  endDate   DateTime
  status    String
  createdAt DateTime @default(now())
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

